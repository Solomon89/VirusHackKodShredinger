
@{
    ViewData["Title"] = "Видео лекция";
}
    <div class="container-fluid videoContainer">
        <div class="container">
            <div class="row">
                <div class="col-sm-8">
                    <div class="videoFrame">

                        <object data="../Лекция2.pdf" type="application/pdf" style="width:100%;height:100%">
                            <a href="../Лекция2.pdf">Лекция2.pdf</a>
                        </object>
                        <div class="videoProf">
                            <video id="videoInput" data-video="0" style="height: 100%; width: 100%;"></video>
                        </div>

                    </div>
                </div>
                <div class="col-md-4 chatFrame">
                    <div class="container clearfix" style="height: 100%;padding: 0;">

                        <div class="chat" style="height: 100%">
                            <div class="chat-history">
                                <ul id="chatData">
                                    





                                </ul>

                            </div> <!-- end chat-history -->

                            <div class="chat-message clearfix" style=" vertical-align: bottom;width: 100%;">
                                <div class="form-inline">

                                    <input id="messageInput" type="text" name="message-to-send" style="width: 88%;border: none;border-bottom: 1px #2F80ED solid;  border-radius: 0;" id="message-to-send" placeholder="У кого-нибудь есть статьи на эту тему?" class="form-control">
                                    <button class="btn btn-primary" id="sendButton" style="border: none;border-bottom: 1px #2F80ED solid;  border-radius: 0;background-color: transparent;"><img src="~/img/cil_cursor.png" alt="Alternate Text" /></button>
                                </div>
                                <div class="form-inline btnAllert" id="btnAllert">
                                    <button href="" id="booring" class="btn btn-primary"><img src="~/img/cil_voice-over-record.png" alt="Alternate Text" />Хочу сказать</button>
                                    <button href="" id="understand" class="btn btn-success"><img src="~/img/cil_lightbulb.png" alt="Alternate Text" /></button>
                                    <a href="" class="btn btn-success"><img src="~/img/cil_mood-good.png" alt="Alternate Text" /></a>
                                    <a href="" class="btn btn-danger"><img src="~/img/cil_lightbulb.png" alt="Alternate Text" /></a>
                                    <a href="" class="btn btn-danger"><img src="~/img/cil_face-dead.png" alt="Alternate Text" /></a>
                                </div>
                            </div> <!-- end chat-message -->
                        </div> <!-- end chat -->
                    </div> <!-- end container -->


                </div>
            </div>
            <div class="row">
                <div class="col-8">
                    <h2>Основы нейронных сетей</h2>
                </div>
            </div>
            <div class="row">
                <div class="col-8">
                    <ul class="tagsFrame">
                        <li>15 октября 2019 г.</li>
                        <li class="tags">Машинное обучение</li>
                        <li class="tags">Нейросети</li>
                    </ul>
                </div>

            </div>
            <div class="row">
                <table cellpadding="0" cellspacing="0" width="0" border="0">
                    <tbody>
                        <tr>
                            <td>
                            </td>
                            <td>
                                <canvas id="canvasOutput" width="50" height="50"></canvas>
                                <p class="err" id="errorMessage"></p>
                            </td>
                            <td></td>
                            <td></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <script src="~/js/adapter-5.0.4.js" type="text/javascript"></script>
        <script src="~/js/utils.js" type="text/javascript"></script>
        <script id="codeSnippet" type="text/code-snippet">

        </script>
        <script type="text/javascript">
            let utils = new Utils('errorMessage');

            utils.loadCode('codeSnippet', 'codeEditor');

            let streaming = false;
            let understandCheker = false;
            let videoInput = document.getElementById('videoInput');
            let startAndStop = document.getElementById('booring');
            let understand = document.getElementById('understand');

            let canvasOutput = document.getElementById('canvasOutput');
            let canvasContext = canvasOutput.getContext('2d');

            startAndStop.addEventListener('click', () => {
                if (!streaming) {
                    utils.clearError();
                    utils.startCamera('qvga', onVideoStarted, 'videoInput');
                } else {
                    utils.stopCamera();
                    onVideoStopped();
                }
                return true;
            }, false);
            understand.addEventListener('click', () => {
                if (understandCheker) {
                    $("#videoInput").hide();
                    $("#canvasOutput").hide();
                }
                else {
                    $("#videoInput").show();
                    $("#canvasOutput").show();
                }
                understandCheker = !understandCheker;
                return false;
            })
            function onVideoStarted() {
                streaming = true;
                videoInput.width = videoInput.videoWidth;
                videoInput.height = videoInput.videoHeight;
                startRecognation();
            }
            function startRecognation() {

                let video = document.getElementById('videoInput');
                let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);
                let dst = new cv.Mat(video.height, video.width, cv.CV_8UC4);
                let gray = new cv.Mat();
                let cap = new cv.VideoCapture(video);
                let faces = new cv.RectVector();
                let eyes = new cv.RectVector();
                let classifier = new cv.CascadeClassifier();
                let eyeCascade = new cv.CascadeClassifier();
                // load pre-trained classifiers
                classifier.load('haarcascade_frontalface_default.xml');
                eyeCascade.load('haarcascade_eye.xml');
                let EyeEventX = new Array();
                let EyeEventY = new Array();
                let current = 0;

                const FPS = 30;
                function processVideo() {
                    try {
                        if (!streaming) {
                            // clean and stop.
                            src.delete();
                            dst.delete();
                            gray.delete();
                            faces.delete();
                            classifier.delete();
                            return;
                        }
                        let begin = Date.now();

                        // start processing.
                        cap.read(src);
                        src.copyTo(dst);
                        cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);
                        // detect faces.
                        classifier.detectMultiScale(gray, faces, 1.1, 3, 0);
                        // draw faces.
                        for (let i = 0; i < faces.size(); ++i) {
                            let face = faces.get(i);
                            let roiGray = gray.roi(faces.get(i));
                            let roiSrc = src.roi(faces.get(i));
                            let point1 = new cv.Point(face.x, face.y);
                            let point2 = new cv.Point(face.x + face.width, face.y + face.height);
                            cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);
                            eyeCascade.detectMultiScale(roiGray, eyes);
                            for (let j = 0; j < eyes.size(); ++j) {
                                let point1Y = new cv.Point(point1.x + eyes.get(j).x, point1.y + eyes.get(j).y);
                                let point2Y = new cv.Point(point1.x + eyes.get(j).x + eyes.get(j).width,
                                    point1.y + eyes.get(j).y + eyes.get(j).height);
                                cv.rectangle(dst, point1Y, point2Y, [0, 0, 255, 255]);
                                //cv.circle(dst, (point1.x + eyes.get(j).x + (eyes.get(j).width / 2), point1.y + eyes.get(j).y + (eyes.get(j).height / 2)), 10, (0, 0, 255), -1);
                                let center = new cv.Point(point1.x + eyes.get(j).x + (eyes.get(j).width / 2), point1.y + eyes.get(j).y + (eyes.get(j).height / 2));
                                let circleColor = new cv.Scalar(255, 153, 102);
                                cv.circle(dst, center, 1, circleColor);


                            }
                            if (i == 0) {
                                EyeEventX.push(Math.round(point1.x + (face.width / 2)));
                                EyeEventY.push(Math.round(point1.y + (face.height / 2)));
                                current++;
                                if (current == 100) {
                                    let sdvY = standardDeviation(EyeEventY);
                                    let sdvX = standardDeviation(EyeEventX);
                                    showInfo(sdvY, sdvX);
                                    console.log("X:SD:" + standardDeviation(EyeEventX) + " AVG:" + average(EyeEventX));
                                    console.log("Y:SD:" + standardDeviation(EyeEventY) + " AVG:" + average(EyeEventY));
                                    current = 0;
                                    EyeEventX = new Array();
                                    EyeEventY = new Array();
                                }
                            }
                        }
                        cv.imshow('canvasOutput', dst);
                        // schedule the next one.
                        let delay = 1000 / FPS - (Date.now() - begin);
                        setTimeout(processVideo, delay);
                    } catch (err) {
                        utils.printError(err);
                    }
                };

                // schedule the first one.
                setTimeout(processVideo, 0);
            }
            function showInfo(stdY, stdX) {
                if (stdY < 10) {
                    $("#booring").addClass('btn-success')
                    $("#booring").removeClass('btn-danger')
                }
                else {
                    $("#booring").removeClass('btn-success')
                    $("#booring").addClass('btn-danger')
                }
                if (stdX < 15) {
                    $("#understand").addClass('btn-success')
                    $("#understand").removeClass('btn-danger')
                }
                else {
                    $("#understand").removeClass('btn-success')
                    $("#understand").addClass('btn-danger')
                }
                let tag = {
                    "JobId": getRandomInt(3),
                    "StudentId": getRandomInt(10),
                    "State1": stdY,
                    "State2": stdX,
                };
                $.ajax({
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    url: "/api/session/UpdateState",
                    dataType: "json",
                    data: JSON.stringify(tag)

                });
            }
            function getRandomInt(max) {
                return Math.floor(Math.random() * Math.floor(max));
            }
            function standardDeviation(values) {
                var avg = average(values);

                var squareDiffs = values.map(function (value) {
                    var diff = value - avg;
                    var sqrDiff = diff * diff;
                    return sqrDiff;
                });

                var avgSquareDiff = average(squareDiffs);

                var stdDev = Math.sqrt(avgSquareDiff);
                return stdDev;
            }

            function average(data) {
                var sum = data.reduce(function (sum, value) {
                    return sum + value;
                }, 0);

                var avg = sum / data.length;
                return avg;
            }
            function onVideoStopped() {
                streaming = false;
                canvasContext.clearRect(0, 0, canvasOutput.width, canvasOutput.height);
            }

            utils.loadOpenCv(() => {
                let faceCascadeFile = '../haarcascade_frontalface_default.xml';
                utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {
                    startAndStop.removeAttribute('disabled');
                });
                let faceCascadeEye = '../haarcascade_eye.xml';

                utils.createFileFromUrl(faceCascadeEye, faceCascadeEye, () => {
                    startAndStop.removeAttribute('disabled');
                });
                // $("#videoInput").hide();
                $("#canvasOutput").hide();
                utils.startCamera('qvga', onVideoStarted, 'videoInput');
                $('#myModal').modal('show')
            });

        </script>
        <script src="~/js/signalr/dist/browser/signalr.js"></script>
        <script src="~/js/chat.js"></script>
    </div>
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Войти на пару</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="exampleInputEmail1">Введите имя</label>
                        <input type="text" class="form-control" id="userInput" aria-describedby="emailHelp" value="Студент"/>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Вступить</button>
                </div>
            </div>
        </div>
    </div>
